// Generated by CoffeeScript 1.3.3
(function() {
  var abie;

  abie = require('../lib/abie');

  exports.abTestOneOption = function(test) {
    var optionA, res;
    optionA = "optionA";
    res = abie.test("TestName", [
      {
        name: optionA
      }
    ]);
    test.equal(res, optionA);
    return test.done();
  };

  exports.abTestTwoOptions = function(test) {
    var aCount, bCount, cases, error, halfTestCount, i, limitHigh, limitLow, optionA, optionB, res, testCount, testName, _i;
    optionA = "optionA";
    optionB = "optionB";
    testName = Math.random();
    aCount = 0;
    bCount = 0;
    testCount = 10000;
    halfTestCount = testCount / 2;
    error = 0.02 * testCount;
    limitLow = halfTestCount - error;
    limitHigh = halfTestCount + error;
    cases = [
      {
        name: optionA
      }, {
        name: optionB
      }
    ];
    for (i = _i = 1; 1 <= testCount ? _i <= testCount : _i >= testCount; i = 1 <= testCount ? ++_i : --_i) {
      res = abie.test(testName, cases);
      if (res === optionA) {
        ++aCount;
      } else {
        ++bCount;
      }
    }
    test.ok(aCount > limitLow, "Acount too low " + aCount);
    test.ok(aCount < limitHigh, "Acount too high " + aCount);
    test.ok(bCount > limitLow, "Bcount too low " + bCount);
    test.ok(bCount < limitHigh, "Bcount too high " + bCount);
    return test.done();
  };

  exports.abTestDuration = function(test) {
    var cases, endDate, i, optionA, optionB, options, res, startDate, testCount, testName, _i;
    optionA = "optionA";
    optionB = "optionB";
    testName = Math.random();
    startDate = Date.now() - 100;
    endDate = Date.now() - 50;
    testCount = 1000;
    cases = [
      {
        name: optionA
      }, {
        name: optionB
      }
    ];
    options = {
      startDate: startDate,
      endDate: endDate
    };
    for (i = _i = 1; 1 <= testCount ? _i <= testCount : _i >= testCount; i = 1 <= testCount ? ++_i : --_i) {
      res = abie.test(testName, cases, options);
      test.equal(res, optionA);
    }
    return test.done();
  };

  exports.abTestActive = function(test) {
    var aCount, bCount, cases, endDate, error, halfTestCount, i, limitHigh, limitLow, optionA, optionB, options, res, startDate, testCount, testName, _i;
    optionA = "optionA";
    optionB = "optionB";
    testName = "TestName";
    aCount = 0;
    bCount = 0;
    testCount = 10000;
    halfTestCount = testCount / 2;
    error = 0.02 * testCount;
    limitLow = halfTestCount - error;
    limitHigh = halfTestCount + error;
    startDate = new Date().setDate(new Date().getDate() - 1);
    endDate = new Date().setDate(new Date().getDate() + 1);
    cases = [
      {
        name: optionA
      }, {
        name: optionB
      }
    ];
    options = {
      startDate: startDate,
      endDate: endDate
    };
    for (i = _i = 1; 1 <= testCount ? _i <= testCount : _i >= testCount; i = 1 <= testCount ? ++_i : --_i) {
      res = abie.test(testName, cases, options);
      if (res === optionA) {
        ++aCount;
      } else {
        ++bCount;
      }
    }
    test.ok(aCount > limitLow, "Acount too low " + aCount);
    test.ok(aCount < limitHigh, "Acount too high " + aCount);
    test.ok(bCount > limitLow, "Bcount too low " + bCount);
    test.ok(bCount < limitHigh, "Bcount too high " + bCount);
    return test.done();
  };

  exports.abTestPopulation = function(test) {
    var cases, i, optionA, optionB, options, population, res, testName, _i, _j;
    optionA = "optionA";
    optionB = "optionB";
    testName = Math.random();
    population = 10000;
    cases = [
      {
        name: optionA
      }, {
        name: optionB
      }
    ];
    options = {
      population: population
    };
    for (i = _i = 1; 1 <= population ? _i <= population : _i >= population; i = 1 <= population ? ++_i : --_i) {
      abie.test(testName, cases, options);
    }
    for (i = _j = 1; 1 <= population ? _j <= population : _j >= population; i = 1 <= population ? ++_j : --_j) {
      res = abie.test(testName, cases, options);
      test.equal(res, optionA);
    }
    return test.done();
  };

  exports.abStickyness = function(test) {
    var cases, followUp, i, j, optionA, optionB, options, res, testName, _i, _j;
    optionA = "OptionA";
    optionB = "OptionB";
    testName = Math.random();
    cases = [
      {
        name: optionA
      }, {
        name: optionB
      }
    ];
    for (i = _i = 1; _i <= 100; i = ++_i) {
      options = {
        user: i
      };
      res = abie.test(testName, cases, options);
      for (j = _j = 1; _j <= 100; j = ++_j) {
        followUp = abie.test(testName, cases, options);
        test.equal(followUp, res);
      }
    }
    return test.done();
  };

  exports.abStickynessMultiple = function(test) {
    var casesA, casesB, i, optionA, optionA1, optionB, optionB2, options, res, testNameA, testNameB, _i, _j;
    optionA = "OptionA";
    optionB = "OptionB";
    optionA1 = "OptionA1";
    optionB2 = "OptionB2";
    testNameA = Math.random();
    testNameB = Math.random();
    casesA = [
      {
        name: optionA
      }, {
        name: optionB
      }
    ];
    casesB = [
      {
        name: optionA1
      }, {
        name: optionB2
      }
    ];
    for (i = _i = 1; _i <= 100; i = ++_i) {
      options = {
        user: i
      };
      abie.test(testNameA, casesA, options);
    }
    for (i = _j = 1; _j <= 100; i = ++_j) {
      options = {
        user: i
      };
      res = abie.test(testNameB, casesB, options);
      test.notEqual(res, optionA);
      test.notEqual(res, optionB);
    }
    return test.done();
  };

}).call(this);
