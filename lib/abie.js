// Generated by CoffeeScript 1.3.3
(function() {

  module.exports = {
    populations: {},
    previous: {},
    test: function(name, testCases, options) {
      var defaultCase, previous, res;
      options = options || {};
      if ((previous = this.getPrevious(name, options)) !== null) {
        return previous;
      }
      this.incrementPopulation(name);
      defaultCase = testCases[0];
      if ((this.isInactive(options)) || (this.populationReached(name, options))) {
        return defaultCase.name;
      }
      res = this.getTestCase(testCases);
      this.setPrevious(name, options, res);
      return res;
    },
    getTestCase: function(cases) {
      var counter, probability, random, testCase, _i, _len;
      counter = cases.length;
      for (_i = 0, _len = cases.length; _i < _len; _i++) {
        testCase = cases[_i];
        probability = 1 / counter--;
        random = Math.random();
        if (random < probability) {
          return testCase.name;
        }
      }
    },
    ensurePrevious: function(name) {
      if (!this.previous[name]) {
        return this.previous[name] = {};
      }
    },
    getPrevious: function(name, options) {
      this.ensurePrevious(name);
      if (options.user && this.previous[name][options.user]) {
        return this.previous[name][options.user];
      }
      return null;
    },
    setPrevious: function(name, options, res) {
      this.ensurePrevious(name);
      if (options.user) {
        return this.previous[name][options.user] = res;
      }
    },
    incrementPopulation: function(name) {
      if (!this.populations[name]) {
        this.populations[name] = 0;
      }
      return this.populations[name]++;
    },
    populationReached: function(name, options) {
      return options.population && this.populations[name] >= options.population;
    },
    isInactive: function(options) {
      return options.startDate > new Date() || options.endDate < new Date();
    }
  };

}).call(this);
